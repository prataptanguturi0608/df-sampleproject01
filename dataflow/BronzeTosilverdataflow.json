{
	"name": "BronzeTosilverdataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dlake_bronze_customers",
						"type": "DatasetReference"
					},
					"name": "customersData"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_bronze_order_items",
						"type": "DatasetReference"
					},
					"name": "OrderItemsData"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_bronze_orders",
						"type": "DatasetReference"
					},
					"name": "OrdersData"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_bronze_products",
						"type": "DatasetReference"
					},
					"name": "ProductsData"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_bronze_stores",
						"type": "DatasetReference"
					},
					"name": "StoresData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dlake_SilverParquet",
						"type": "DatasetReference"
					},
					"name": "CustomersDataSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_SilverParquet",
						"type": "DatasetReference"
					},
					"name": "OrderItemsSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_SilverParquet",
						"type": "DatasetReference"
					},
					"name": "OrdersSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_SilverParquet",
						"type": "DatasetReference"
					},
					"name": "ProductsSink"
				},
				{
					"dataset": {
						"referenceName": "ds_dlake_SilverParquet",
						"type": "DatasetReference"
					},
					"name": "StoresSink"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "cast2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select2"
				},
				{
					"name": "cast3"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "select3"
				},
				{
					"name": "cast4"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "select4"
				},
				{
					"name": "cast5"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "select5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     partitionBy('hash', 1)) ~> customersData",
				"source(output(",
				"          ORDER_ID as string,",
				"          LINE_ITEM_ID as string,",
				"          PRODUCT_ID as string,",
				"          UNIT_PRICE as string,",
				"          QUANTITY as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrderItemsData",
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersData",
				"source(output(",
				"          PRODUCT_ID as string,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as string,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> ProductsData",
				"source(output(",
				"          STORE_ID as string,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          IngestionBy as string,",
				"          IngestionTimestamp as string,",
				"          IngestionDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> StoresData",
				"customersData cast(output(",
				"          CUSTOMER_ID as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 aggregate(groupBy(CUSTOMER_ID,",
				"          FULL_NAME,",
				"          EMAIL_ADDRESS,",
				"          Ingestion_by,",
				"          Ingestion_Date,",
				"          Ingestion_TimeStamp),",
				"     Count = count(CUSTOMER_ID)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          CUSTOMER_ID,",
				"          FULL_NAME,",
				"          EMAIL_ADDRESS,",
				"          Ingestion_by,",
				"          Ingestion_Date,",
				"          Ingestion_TimeStamp",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"OrderItemsData cast(output(",
				"          ORDER_ID as integer,",
				"          LINE_ITEM_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer",
				"     ),",
				"     errors: true) ~> cast2",
				"cast2 aggregate(groupBy(ORDER_ID,",
				"          LINE_ITEM_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date),",
				"     Count = count()) ~> aggregate2",
				"aggregate2 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"OrdersData cast(output(",
				"          ORDER_ID as integer,",
				"          CUSTOMER_ID as integer,",
				"          STORE_ID as integer",
				"     ),",
				"     errors: true) ~> cast3",
				"cast3 aggregate(groupBy(ORDER_ID,",
				"          ORDER_DATETIME,",
				"          ORDER_STATUS,",
				"          CUSTOMER_ID,",
				"          STORE_ID,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date),",
				"     Count = count()) ~> aggregate3",
				"aggregate3 select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATETIME,",
				"          ORDER_STATUS,",
				"          CUSTOMER_ID,",
				"          STORE_ID,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"ProductsData cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double,",
				"          Ingestion_by as string,",
				"          Ingestion_TimeStamp as string,",
				"          Ingestion_Date as string",
				"     ),",
				"     errors: true) ~> cast4",
				"cast4 aggregate(groupBy(PRODUCT_ID,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date),",
				"     count = count()) ~> aggregate4",
				"aggregate4 select(mapColumn(",
				"          PRODUCT_ID,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"StoresData cast(output(",
				"          STORE_ID as string",
				"     ),",
				"     errors: true) ~> cast5",
				"cast5 aggregate(groupBy(PRODUCT_ID,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date),",
				"     count = count()) ~> aggregate5",
				"aggregate5 select(mapColumn(",
				"          PRODUCT_ID,",
				"          PRODUCT_NAME,",
				"          UNIT_PRICE,",
				"          Ingestion_by,",
				"          Ingestion_TimeStamp,",
				"          Ingestion_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_Date as string,",
				"          Ingestion_TimeStamp as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomersDataSink",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_Date as string,",
				"          Ingestion_TimeStamp as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrderItemsSink",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_Date as string,",
				"          Ingestion_TimeStamp as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrdersSink",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_Date as string,",
				"          Ingestion_TimeStamp as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ProductsSink",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as integer,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string,",
				"          Ingestion_by as string,",
				"          Ingestion_Date as string,",
				"          Ingestion_TimeStamp as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StoresSink"
			]
		}
	}
}